component usbpend "modusoft CNC USB Pendant component";

author "Sascha Ittner";
license "GPL";

option singleton yes;
option userspace yes;

pin out u32 hw_time;

pin out s32 enc_pos;
pin out u32 enc_time;

pin out bit btn_a1;
pin out bit btn_b1;
pin out bit btn_c1;
pin out bit btn_a2;
pin out bit btn_b2;
pin out bit btn_c2;
pin out bit btn_a3;
pin out bit btn_b3;
pin out bit btn_c3;
pin out bit btn_a4;
pin out bit btn_b4;
pin out bit btn_c4;
pin out bit btn_aux_1;
pin out bit btn_aux_2;

option extra_setup;
option extra_cleanup;

;;

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <errno.h>

#include <linux/types.h>
#include <linux/input.h>
#include <linux/hidraw.h>

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#define CHECK_BUTTON(x, y) ((x & (1 << y)) ? 1 : 0)

typedef struct __attribute__ ((__packed__)) {
  uint16_t time;
  int16_t pos;
} enc_data_t;

typedef struct __attribute__ ((__packed__)) {
  uint16_t app_time;
  enc_data_t enc;
  uint16_t buttons;
} USBHID_Report_Data_In_t;

static int exit_flag = 0;

EXTRA_SETUP() {
  exit_flag = 0;
  return 0;
}

EXTRA_CLEANUP() {
  exit_flag = 1;
}

static void user_mainloop(void) {
  int fd, len, do_init;
  int16_t delta;
  USBHID_Report_Data_In_t data, last_data;

  do_init = 1;
  hw_time = 0;
  while(!exit_flag) {
    fd = open("/dev/usbpend", O_RDWR);
    if (fd < 0) {
      sleep(1);
      continue;
    }

    while (!exit_flag) {
      len = read(fd, &data, sizeof(data));
      if (len < 0) {
        break;
      }
      if (len != sizeof(data)) {
        continue;
      }

      if (!do_init) {
	      hw_time = (hw_time & 0xffff0000) | data.app_time;
        if (data.app_time < last_data.app_time) {
          hw_time += 0x10000;
        }

        delta = data.enc.pos - last_data.enc.pos;
        enc_pos += delta;
        if (data.enc.time != last_data.enc.time) {
          delta = data.app_time - data.enc.time;
          enc_time = hw_time - delta;
        }

        btn_a1    = CHECK_BUTTON(data.buttons, 0);
        btn_b1    = CHECK_BUTTON(data.buttons, 4);
        btn_c1    = CHECK_BUTTON(data.buttons, 8);
        btn_a2    = CHECK_BUTTON(data.buttons, 1);
        btn_b2    = CHECK_BUTTON(data.buttons, 5);
        btn_c2    = CHECK_BUTTON(data.buttons, 9);
        btn_a3    = CHECK_BUTTON(data.buttons, 2);
        btn_b3    = CHECK_BUTTON(data.buttons, 6);
        btn_c3    = CHECK_BUTTON(data.buttons, 10);
        btn_a4    = CHECK_BUTTON(data.buttons, 3);
        btn_b4    = CHECK_BUTTON(data.buttons, 7);
        btn_c4    = CHECK_BUTTON(data.buttons, 11);
        btn_aux_1 = CHECK_BUTTON(data.buttons, 12);
        btn_aux_2 = CHECK_BUTTON(data.buttons, 13);
      } else {
        hw_time = 0;
      }

      do_init = 0;
      last_data = data;
    }

    close(fd);

    do_init = 1;

    btn_a1    = 0;
    btn_b1    = 0;
    btn_c1    = 0;
    btn_a2    = 0;
    btn_b2    = 0;
    btn_c2    = 0;
    btn_a3    = 0;
    btn_b3    = 0;
    btn_c3    = 0;
    btn_a4    = 0;
    btn_b4    = 0;
    btn_c4    = 0;
    btn_aux_1 = 0;
    btn_aux_2 = 0;

  }
}

