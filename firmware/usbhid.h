#ifndef _USBHID_H_
#define _USBHID_H_

#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#include <LUFA/Version.h>
#include <LUFA/Drivers/USB/USB.h>

#include "encoder.h"

// Device information
#define USBHID_VID          0x03EB
#define USBHID_PID          0x204F
#define USBHID_MANUF_STR    L"modusoft GmbH"
#define USBHID_PROD_STR     L"CNC USB Pendant V1.0"
#define USBHID_SERIAL_STR   L"20141107-01"

#define USBHID_BUTTON_USAGE_PAGE       0x09

#define USBHID_DESKTOP_USAGE_PAGE      0x01
#define USBHID_DESKTOP_USAGE_POINTER   0x01
#define USBHID_DESKTOP_USAGE_MOUSE     0x02
#define USBHID_DESKTOP_USAGE_JOYSTICK  0x04
#define USBHID_DESKTOP_USAGE_GAMEPAD   0x05
#define USBHID_DESKTOP_USAGE_KEYBOARD  0x06
#define USBHID_DESKTOP_USAGE_X         0x30
#define USBHID_DESKTOP_USAGE_Y         0x31
#define USBHID_DESKTOP_USAGE_Z         0x32
#define USBHID_DESKTOP_USAGE_RX        0x33
#define USBHID_DESKTOP_USAGE_RY        0x34
#define USBHID_DESKTOP_USAGE_RZ        0x35

#define USBHID_COLLECTION_PHYSICAL     0x00
#define USBHID_COLLECTION_APPLICTION   0x01

#define USBHID_VENDOR_USAGE_PAGE       0xff00
#define USBHID_VENDOR_USAGE_PENDANT    0x01
#define USBHID_VENDOR_USAGE_ENCODER    0x02
#define USBHID_VENDOR_USAGE_APPTIME    0x03
#define USBHID_VENDOR_USAGE_POSTIME    0x04
#define USBHID_VENDOR_USAGE_POS        0x05

//#define USBHID_STATE_USE_CALLBACK 1
//#define USBHID_PROCESS_REPORT_USE_CALLBACK 1
//#define USBHID_COMPARE_REPORT_IN_DATA 1

#define USBHID_DESCRIPTOR \
  HID_RI_USAGE_PAGE(16, USBHID_VENDOR_USAGE_PAGE), \
  HID_RI_USAGE(8, USBHID_VENDOR_USAGE_PENDANT), \
  HID_RI_COLLECTION(8, USBHID_COLLECTION_APPLICTION), \
    HID_RI_USAGE(8, USBHID_VENDOR_USAGE_APPTIME), \
    HID_RI_LOGICAL_MINIMUM(16, 0), \
    HID_RI_LOGICAL_MAXIMUM(16, 65535), \
    HID_RI_REPORT_COUNT(8, 1), \
    HID_RI_REPORT_SIZE(8, 16), \
    HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE), \
    HID_RI_USAGE(8, USBHID_VENDOR_USAGE_ENCODER), \
    HID_RI_COLLECTION(8, USBHID_COLLECTION_PHYSICAL), \
      HID_RI_USAGE(8, USBHID_VENDOR_USAGE_POSTIME), \
      HID_RI_LOGICAL_MINIMUM(16, 0), \
      HID_RI_LOGICAL_MAXIMUM(16, 65535), \
      HID_RI_REPORT_COUNT(8, 1), \
      HID_RI_REPORT_SIZE(8, 16), \
      HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE), \
      HID_RI_USAGE(8, USBHID_VENDOR_USAGE_POS), \
      HID_RI_LOGICAL_MINIMUM(16, -32768), \
      HID_RI_LOGICAL_MAXIMUM(16, 32767), \
      HID_RI_REPORT_COUNT(8, 1), \
      HID_RI_REPORT_SIZE(8, 16), \
      HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE), \
    HID_RI_END_COLLECTION(0), \
    HID_RI_USAGE_PAGE(8, USBHID_BUTTON_USAGE_PAGE), \
    HID_RI_USAGE_MINIMUM(8, 1), \
    HID_RI_USAGE_MAXIMUM(8, 14), \
    HID_RI_LOGICAL_MINIMUM(8, 0), \
    HID_RI_LOGICAL_MAXIMUM(8, 1), \
    HID_RI_REPORT_SIZE(8, 1), \
    HID_RI_REPORT_COUNT(8, 14), \
    HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE), \
    HID_RI_REPORT_SIZE(8, 2), \
    HID_RI_REPORT_COUNT(8, 1), \
    HID_RI_INPUT(8, HID_IOF_CONSTANT), \
  HID_RI_END_COLLECTION(0)

/*
#define USBHID_DESCRIPTOR \
  HID_RI_USAGE_PAGE(8, USBHID_DESKTOP_USAGE_PAGE), \
  HID_RI_USAGE(8, USBHID_DESKTOP_USAGE_GAMEPAD), \
  HID_RI_COLLECTION(8, USBHID_COLLECTION_APPLICTION), \
    HID_RI_USAGE(8, USBHID_DESKTOP_USAGE_POINTER), \
    HID_RI_COLLECTION(8, USBHID_COLLECTION_PHYSICAL), \
      HID_RI_USAGE(8, USBHID_DESKTOP_USAGE_X), \
      HID_RI_USAGE(8, USBHID_DESKTOP_USAGE_RZ), \
      HID_RI_LOGICAL_MINIMUM(16, -32768), \
      HID_RI_LOGICAL_MAXIMUM(16, 32767), \
      HID_RI_REPORT_COUNT(8, 2), \
      HID_RI_REPORT_SIZE(8, 16), \
      HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE), \
    HID_RI_END_COLLECTION(0), \
    HID_RI_USAGE_PAGE(8, USBHID_BUTTON_USAGE_PAGE), \
    HID_RI_USAGE_MINIMUM(8, 1), \
    HID_RI_USAGE_MAXIMUM(8, 14), \
    HID_RI_LOGICAL_MINIMUM(8, 0), \
    HID_RI_LOGICAL_MAXIMUM(8, 1), \
    HID_RI_REPORT_SIZE(8, 1), \
    HID_RI_REPORT_COUNT(8, 14), \
    HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE), \
    HID_RI_REPORT_SIZE(8, 2), \
    HID_RI_REPORT_COUNT(8, 1), \
    HID_RI_INPUT(8, HID_IOF_CONSTANT), \
  HID_RI_END_COLLECTION(0)
*/

typedef struct __attribute__ ((__packed__)) {
  uint16_t app_time;
  enc_data_t enc;
  uint16_t buttons;
} USBHID_Report_Data_In_t;

// list of states
#define USBHID_STATE_DISCON 0
#define USBHID_STATE_ENUM   1
#define USBHID_STATE_READY  2
#define USBHID_STATE_ERROR  3

extern void usbhid_init(void);
extern int8_t usbhid_get_state(void);
extern void usbhid_task(void);

#ifdef USBHID_STATE_USE_CALLBACK
extern void usbhid_state_callback(int8_t state);
#endif

extern bool usbhid_create_report_callback(USBHID_Report_Data_In_t* data);

#ifdef USBHID_PROCESS_REPORT_USE_CALLBACK
extern void usbhid_process_report_callback(USBHID_Report_Data_Out_t* data);
#endif

#endif

